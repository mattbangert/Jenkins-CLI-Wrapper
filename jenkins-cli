#!/usr/bin/env bash

# Matt Bangert
# mbangert@smarsh.com

# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
#set -o nounset
# Catch the error in case mysqldump fails (but gzip succeeds) in `mysqldump |gzip`
set -o pipefail
# Turn on traces, useful while debugging but commented out by default
#set -o xtrace

# Set IFS to just newline and tab at the start
#
# http://www.dwheeler.com/essays/filenames-in-shell.html
#
# $DEFAULT_IFS and $SAFER_IFS
#
# $DEFAULT_IFS contains the default $IFS value in case it's needed, such as
# when expanding an array and you want to separate elements by spaces.
# $SAFER_IFS contains the preferred settings for the program, and setting it
# separately makes it easier to switch between the two if needed.
#
# Supress ShellCheck unused variable warning:
# shellcheck disable=SC2034
DEFAULT_IFS="${IFS}"
SAFER_IFS=$'\n\t'
IFS="${SAFER_IFS}"

############################  BASIC SETUP TOOLS
# Reset
Color_off='\033[0m'       # Text Reset

# Regular Colors
Red='\033[0;31m'
Blue='\033[0;34m'
Green='\033[0;32m'

#System name
System="$(uname -s)"

_msg() {
    printf '%b\n' "$1" >&2
}

_success() {
    _msg "${Green}[✔]${Color_off} ${1}${2}"
}

_info() {
    _msg "${Blue}==>${Color_off} ${1}${2}"
}

_error() {
    _msg "${Red}[✘]${Color_off} ${1}${2}"
    exit 1
}

_warn () {
    _msg "${Red}[✘]${Color_off} ${1}${2}"
}


# Checks if input is a number
_isnumber()
{
	n=$(($1 + 0)) 2>/dev/null && test "$n" = "$1"
}

# Returns the OS
_what_os(){
  unamestr=$(uname | tr '[A-Z]' '[a-z]')
}


###############################################################################
# _command_exists()
#
# Usage:
#   _command_exists <command-name>
#
# Returns:
#   0  If a command with the given name is defined in the current environment.
#   1  If not.
#
# Information on why `hash` is used here:
# http://stackoverflow.com/a/677212
_command_exists() {
  hash "${1}" 2>/dev/null
}

_program_must_exist() {
    _command_exists $1

    # throw error on non-zero return value
    if [ "$?" -ne 0 ]; then
        error "You must have '$1' installed to continue."
    fi
}

_show_usage()
{
	cat <<EOF
	Usage:


	Modes:


	Options:


EOF
}


###############################################################################
# _contains()
#
# Usage:
#   _contains <item> <list>
#
# Example:
#   _contains "$item" "${list[*]}"
#
# Returns:
#   0  If the item is included in the list.
#   1  If not.
_contains() {
  IFS=" " read -r -a local _test_list <<< "${*:2}"
  for __test_element in "${_test_list[@]:-}"
  do
    if [[ "${__test_element}" == "${1}" ]]
    then
      return 0
    fi
  done
  return 1
}

_is_valid_uri(){
    URIREGEX='(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
    URI=$1

    if [[ ! $URI =~ $URIREGEX ]]
    then
        _error "Invalid URI $URI, please review your input."
    fi
}

_create_credentials(){
# This file will contain the
# SERVER_URL
# AUTH_KEY
FILENAME="$HOME/.jenkins.creds"

read -p "What is the Jenkins URL with port? " URL
_is_valid_uri "$URL"
read -p "What is the username? " USERNAME
read -p "What is the API Key? " APIKEY

echo "SERVER_URL=$URL" >> "$FILENAME"
echo "AUTH_KEY=$USERNAME:$APIKEY" >> "$FILENAME"

_success "Credentials file created"

}




############################ MAIN()

DEFAULT_JENKINS_JAR='jenkins-cli.jar'

# Check for credentials, prompt to create if not there

if [[ ! -f ~/.jenkins.creds ]]; then
    _warn "You must set your USERNAME, PASSWORD, and SERVER_URL for Jenkins in ~/.jenkins.creds"
    read -p "Would you like to do that now? (y/n) " RESP
    case $RESP in
      [yY]) _create_credentials
      ;;
      [nN]) _error "Exiting"
      ;;
      *) _error "Invalid choice, exiting."
      ;;
    esac
    
fi

# If the Jar file is not found in the local dir or in the .dotfiles/bin dir, ask where it is
# and write the custom location to the credentials file
source $HOME/.jenkins.creds

if [ ! -f $DEFAULT_JENKINS_JAR ] | [ -z $CLI_JAR_PATH ];
then
  read -p "What is the location of the Jenkins CLI Jar? " LOC

  if [[ ! -f $LOC ]];
  then
    _error "The Jenkins CLI JAR not found at that path..."
  elif [[ -f $LOC ]]; 
  then
    echo "CLI_JAR_PATH=$LOC" >> "$HOME/.jenkins.creds"
  fi
elif [[ -f $DEFAULT_JENKINS_JAR ]];
then
    echo "CLI_JAR_PATH=$DEFAULT_JENKINS_JAR" >> "$HOME/.jenkins.creds"
fi

java -jar "$CLI_JAR_PATH" -http -s "$SERVER_URL" -auth "$AUTH_KEY" "$@"